{"version":3,"sources":["reportWebVitals.ts","components/RowData.tsx","components/CurrencyItem.tsx","components/MoneyInput.tsx","hooks/useExchangeCurrency.tsx","components/Card.tsx","data/currencies.tsx","store/Action.tsx","store/Reducer.tsx","store/State.tsx","store/index.tsx","components/BankCard.tsx","components/BankAccountForm.tsx","components/PaymentForm.tsx","pages/Exchange.tsx","routes.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","RowData","left","right","alignItems","CurrencyItem","props","as","transition","borderRadius","fontSize","fontWeight","bg","color","textAlign","p","_hover","onClick","value","MoneyInput","label","modalLabel","isSearch","handler","allowedCurrencies","setValue","symbol","setSymbol","search","setSearch","useControllableState","defaultValue","toString","amount","setAmount","useDisclosure","isOpen","onOpen","onClose","handleSetValue","useCallback","e","target","newVal","parseFloat","isNaN","handleSetSymbol","symb","handleCleanSearch","useEffect","MoneyInputField","maxW","background","mb","display","type","variant","borderWidth","onChange","rightIcon","MoneyInputModal","isCentered","rounded","pb","minH","size","placeholder","width","direction","map","currency","useExchangeCurrency","initialAmount","initialCurrency","setCurrency","Card","height","justifyContent","pt","pr","pl","mt","minHeight","minWidth","children","fiats","ADD_ORDER","CLEAN_ORDERS","ADD_BANK_ACCOUNT","reducer","state","action","order","payload","orders","account","accounts","initialState","store","createContext","StoreProvider","useReducer","dispatch","Provider","BankCard","borderColor","cursor","BankAccountForm","useContext","formik","useFormik","initialValues","bank","bic","onSubmit","val","ctx","a","resetForm","handleSubmit","id","name","values","email","handleChange","error","touched","Boolean","errors","helperText","iban","fullName","address","w","mr","postalCode","country","isFullWidth","PaymentForm","Exchange","handlerFrom","handlerTo","amountFrom","currencyFrom","searchFrom","amountTo","currencyTo","useState","setAccount","isFlipped","onToggle","isOpenBankAccountForm","onCloseBankAccountForm","onOpenBankAccountForm","isOpenPaymentForm","onClosePaymentForm","onOpenPaymentForm","exchangeCard","filter","toLocaleLowerCase","includes","colorScheme","textColor","bankAccountCard","FaPlus","h","AppRoutes","path","element","NoMatch","to","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wJAceA,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,qDCEDQ,EAAU,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,MAAOC,EAAhB,EAAgBA,WAAhB,OACrB,eAAC,IAAD,CAAMA,WAAYA,EAAlB,UACGF,EACD,cAAC,IAAD,IACCC,M,sCCZE,SAASE,EAAaC,GAC3B,OACE,cAAC,IAAD,CACEC,GAAG,SACHC,WAAW,uCACXC,aAAa,MACbC,SAAS,OACTC,WAAW,WACXC,GAAG,QACHC,MAAM,OACNC,UAAU,OACVC,EAAG,EACHC,OAAQ,CAAEJ,GAAI,WACdK,QAASX,EAAMW,QAXjB,SAaGX,EAAMY,QCSN,IAAMC,EAAa,SAACb,GAA4B,IAC7Cc,EAA4Dd,EAA5Dc,MAAOC,EAAqDf,EAArDe,WAAYC,EAAyChB,EAAzCgB,SAAUC,EAA+BjB,EAA/BiB,QAASC,EAAsBlB,EAAtBkB,kBADM,cAEYD,EAFZ,GAE7CL,EAF6C,KAEtCO,EAFsC,KAE5BC,EAF4B,KAEpBC,EAFoB,KAETC,EAFS,KAEDC,EAFC,OAIxBC,YAA6B,CAAEC,aAAcb,EAAMc,aAJ3B,mBAI7CC,EAJ6C,KAIrCC,EAJqC,OAKhBC,cAA5BC,EAL4C,EAK5CA,OAAQC,EALoC,EAKpCA,OAAQC,EAL4B,EAK5BA,QAElBC,EAAiBC,uBAAY,SAACC,GAClCP,EAAUO,EAAEC,OAAOxB,OACnB,IAAMyB,EAASC,WAAWH,EAAEC,OAAOxB,OAC9B2B,MAAMF,IAASlB,EAASkB,KAC5B,IAEGG,EAAkBN,uBACtB,SAACO,GAAD,OAAkB,WAChBpB,EAAUoB,GACVlB,EAAU,IACVS,OAEF,CAACX,EAAWE,EAAWS,IAGnBU,EAAoBR,uBAAY,WACpCX,EAAU,MACT,CAACA,IAEJoB,qBAAU,WACRf,EAAUhB,EAAMc,cACf,CAACd,IAEJ,IAAMgC,EACJ,eAAC,IAAD,CAAKC,KAAK,KAAKC,WAAW,QAAQ3C,aAAc,GAAIM,EAAG,EAAGsC,GAAI,EAA9D,UACE,cAAC,IAAD,CAAM3C,SAAS,OAAOC,WAAW,MAAjC,SACGS,IAEH,eAAC,IAAD,CAAKkC,QAAQ,OAAb,UACE,cAAC,IAAD,CAAOC,KAAK,SAASC,QAAQ,WAAWC,YAAa,EAAG/C,SAAU,GAAIC,WAAY,IAAK+C,SAAUnB,EAAgBrB,MAAOe,IACxH,cAAC,IAAD,CAAQ0B,UAAW,cAAC,IAAD,IAAmBP,WAAW,UAAUnC,QAASoB,EAApE,SACGX,UAMHkC,EACJ,eAAC,IAAD,CAAOxB,OAAQA,EAAQE,QAASA,EAASuB,YAAU,EAAnD,UACE,cAAC,IAAD,IACA,eAAC,IAAD,CAAcC,QAAS,GAAIC,GAAI,GAAIC,KAAK,OAAxC,UACE,cAAC,IAAD,CAAa5D,WAAW,SAAxB,SAAkCiB,IAClC,cAAC,IAAD,IACA,eAAC,IAAD,WACGC,GACC,eAAC,IAAD,CAAY2C,KAAK,KAAKZ,GAAI,EAA1B,UACE,cAAC,IAAD,CAAOa,YAAY,SAAShD,MAAOU,EAAQ8B,SAAU,SAACjB,GAAD,OAAOZ,EAAUY,EAAEC,OAAOxB,QAAQT,aAAc,KACrG,cAAC,IAAD,CAAmB0D,MAAM,SAAzB,SACE,cAAC,IAAD,CAAalD,QAAS+B,SAI5B,cAAC,IAAD,CAAMoB,UAAU,SAAhB,SACG5C,EAAkB6C,KAAI,SAACC,GAAD,OACrB,cAACjE,EAAD,CAAca,MAAOoD,EAAUrD,QAAS6B,EAAgBwB,mBAQpE,OACE,eAAC,WAAD,WACGpB,EACAU,MChGMW,EAAsB,SAACC,EAAuBC,GAA8C,IAAD,EAC1E3C,YAAqB,CAAEC,aAAcyC,IADqC,mBAC/FvC,EAD+F,KACvFC,EADuF,OAEtEJ,YAAqB,CAAEC,aAAc0C,IAFiC,mBAE/FH,EAF+F,KAErFI,EAFqF,OAG1E5C,YAAqB,CAAEC,aAAc,KAHqC,mBAKtG,MAAO,CAACE,EAAQC,EAAWoC,EAAUI,EALiE,Y,iBCA3FC,EAAW,SAACrE,GAAD,OACtB,cAAC,IAAD,CAAMsE,OAAO,QAAQC,eAAe,SAASzE,WAAW,aAAxD,SACE,cAAC,IAAD,CAAMgE,UAAU,SAAShB,WAAY,WAAYU,QAAS,GAAIgB,GAAI,GAAIf,GAAI,GAAIgB,GAAI,EAAGC,GAAI,EAAGC,GAAG,OAAO5B,GAAG,OAAO6B,UAAW,IAAKC,SAAU,IAA1I,SACG7E,EAAM8E,c,QCHAC,EAAQ,CAAC,MAAO,O,gBCOhBC,EAAY,YASlB,IAAMC,EAAe,eAQrB,IAAMC,EAAmB,mBCvBzB,IAAMC,EAAkC,SAACC,EAAOC,GACrD,OAAQA,EAAOpC,MACb,KAAK+B,EAAY,IACEM,EAAUD,EAAnBE,QACR,OAAO,2BAAKH,GAAZ,IAAmBI,OAAO,GAAD,mBAAMJ,EAAMI,QAAZ,CAAoBF,MAE/C,KAAKL,EACH,OAAO,2BAAKG,GAAZ,IAAmBI,OAAQ,KAE7B,KAAKN,EAAmB,IACLO,EAAYJ,EAArBE,QACR,OAAO,2BAAKH,GAAZ,IAAmBM,SAAS,GAAD,mBAAMN,EAAMM,UAAZ,CAAsBD,MAEnD,IDmB+B,sBClB7B,OAAO,2BAAKL,GAAZ,IAAmBM,SAAU,KAE/B,QACE,OAAON,ICAAO,EAAsB,CACjCD,SAAU,GACVF,OAAQ,ICdGI,EAAQC,wBAAc,IAQpBC,EAN0B,SAAC,GAAkB,IAAhBhB,EAAe,EAAfA,SAAe,EAC/BiB,qBAAWZ,EAASQ,GADW,mBAEnD/E,EAAQ,CAAEwE,MAFyC,KAElCY,SAFkC,MAGzD,OAAO,eAACJ,EAAMK,SAAP,CAAgBrF,MAAOA,EAAvB,cAAgCkE,EAAhC,Q,gBCZIoB,EAA0B,SAAC,GAAD,IAAGpB,EAAH,EAAGA,SAAa9E,EAAhB,mCACrC,cAAC,IAAD,yBAAKM,GAAG,QAAQ6F,YAAY,WAAWhG,aAAc,GAAIqE,GAAI,EAAGf,GAAI,EAAGiB,GAAI,GAAID,GAAI,GAAI1B,GAAI,EAAGqD,OAAO,WAAcpG,GAAnH,aACG8E,M,yCCOQuB,EAAwC,SAAC,GAAmC,IAAjCvE,EAAgC,EAAhCA,OAAQE,EAAwB,EAAxBA,QAAS8C,EAAe,EAAfA,SAC/DkB,EAAaM,qBAAWV,GAAxBI,SAEFO,EAASC,YAAU,CACvBC,cAAe,CACbC,KAAM,gBACNC,IAAK,cAEPC,SAAS,WAAD,4BAAE,WAAOC,EAAKC,GAAZ,SAAAC,EAAA,sDACRf,ELUG,CACL/C,KAAMiC,EACNK,QKZ0BsB,IACxBC,EAAIE,YACJhF,IAHQ,2CAAF,qDAAC,KAOX,OACE,eAAC,IAAD,CAAOF,OAAQA,EAAQE,QAASA,EAASuB,YAAU,EAAnD,UACE,cAAC,IAAD,IACA,eAAC,IAAD,CAAcC,QAAS,GAAIC,GAAI,GAAIC,KAAK,OAAxC,UACE,cAAC,IAAD,CAAa5D,WAAW,SAAxB,SAAkCgF,IAClC,cAAC,IAAD,IACA,cAAC,IAAD,UACE,uBAAM8B,SAAUL,EAAOU,aAAvB,UACE,eAAC,IAAD,CAAaC,GAAG,QAAhB,UACE,cAAC,IAAD,4BACA,cAAC,IAAD,CACEA,GAAG,QACHC,KAAK,QACLlE,KAAK,QACLrC,MAAO2F,EAAOa,OAAOC,MACrBjE,SAAUmD,EAAOe,aACjBC,MAAOhB,EAAOiB,QAAQH,OAASI,QAAQlB,EAAOmB,OAAOL,OACrDM,WAAYpB,EAAOiB,QAAQH,OAASd,EAAOmB,OAAOL,QAEpD,cAAC,IAAD,+CAEF,eAAC,IAAD,CAAaH,GAAG,OAAO1C,GAAI,EAA3B,UACE,cAAC,IAAD,mBACA,cAAC,IAAD,CACE0C,GAAG,OACHC,KAAK,OACLlE,KAAK,OACLrC,MAAO2F,EAAOa,OAAOQ,KACrBxE,SAAUmD,EAAOe,aACjBC,MAAOhB,EAAOiB,QAAQI,MAAQH,QAAQlB,EAAOmB,OAAOE,MACpDD,WAAYpB,EAAOiB,QAAQI,MAAQrB,EAAOmB,OAAOE,OAEnD,cAAC,IAAD,qDAWF,eAAC,IAAD,CAAaV,GAAG,WAAW1C,GAAI,EAA/B,UACE,cAAC,IAAD,wBACA,cAAC,IAAD,CACE0C,GAAG,WACHC,KAAK,WACLlE,KAAK,OACLrC,MAAO2F,EAAOa,OAAOS,SACrBzE,SAAUmD,EAAOe,aACjBC,MAAOhB,EAAOiB,QAAQK,UAAYJ,QAAQlB,EAAOmB,OAAOG,UACxDF,WAAYpB,EAAOiB,QAAQK,UAAYtB,EAAOmB,OAAOG,cAGzD,eAAC,IAAD,CAAaX,GAAG,UAAU1C,GAAI,EAA9B,UACE,cAAC,IAAD,sBACA,cAAC,IAAD,CACE0C,GAAG,UACHC,KAAK,UACLlE,KAAK,OACLrC,MAAO2F,EAAOa,OAAOU,QACrB1E,SAAUmD,EAAOe,aACjBC,MAAOhB,EAAOiB,QAAQM,SAAWL,QAAQlB,EAAOmB,OAAOI,SACvDH,WAAYpB,EAAOiB,QAAQM,SAAWvB,EAAOmB,OAAOI,aAGzD,eAAC,IAAD,WACA,eAAC,IAAD,CAAaZ,GAAG,aAAa1C,GAAI,EAAGuD,EAAG,IAAKC,GAAI,EAAhD,UACG,cAAC,IAAD,8BACA,cAAC,IAAD,CACEd,GAAG,aACHC,KAAK,aACLlE,KAAK,OACLrC,MAAO2F,EAAOa,OAAOa,WACrB7E,SAAUmD,EAAOe,aACjBC,MAAOhB,EAAOiB,QAAQS,YAAcR,QAAQlB,EAAOmB,OAAOO,YAC1DN,WAAYpB,EAAOiB,QAAQS,YAAc1B,EAAOmB,OAAOO,gBAG3D,eAAC,IAAD,CAAaf,GAAG,UAAU1C,GAAI,EAA9B,UACE,cAAC,IAAD,sBACA,cAAC,IAAD,CACE0C,GAAG,UACHC,KAAK,UACLlE,KAAK,OACLrC,MAAO2F,EAAOa,OAAOc,QACrB9E,SAAUmD,EAAOe,aACjBC,MAAOhB,EAAOiB,QAAQU,SAAWT,QAAQlB,EAAOmB,OAAOQ,SACvDP,WAAYpB,EAAOiB,QAAQU,SAAW3B,EAAOmB,OAAOQ,gBAIxD,cAAC,IAAD,CAAQvD,GAAI,GAAIwD,aAAW,EAAClF,KAAK,SAAjC,gCCnHCmF,EAAoC,SAAC,GAAmC,IAAjCtG,EAAgC,EAAhCA,OAAQE,EAAwB,EAAxBA,QAAS8C,EAAe,EAAfA,SAC9CwB,qBAAWV,GAAxBI,SAER,OACE,eAAC,IAAD,CAAOlE,OAAQA,EAAQE,QAASA,EAASuB,YAAU,EAAnD,UACE,cAAC,IAAD,IACA,eAAC,IAAD,CAAcC,QAAS,GAAIC,GAAI,GAAIC,KAAK,OAAxC,UACE,cAAC,IAAD,CAAa5D,WAAW,SAAxB,SAAkCgF,IAClC,cAAC,IAAD,IACA,cAAC,IAAD,WCKO,SAASuD,IAAY,IRdb/G,EQeb8D,EAAUkB,qBAAWV,GAArBR,MAEFkD,EAAcrE,EAAoB,EAAG,OACrCsE,EAAYtE,EAAoB,IAAK,OAJV,cAMqBqE,EANrB,GAM1BE,EAN0B,KAMXC,GANW,WAMOC,GANP,yBAOGH,EAPH,GAO1BI,EAP0B,KAOXC,GAPW,aAQHC,mBAA6B,MAR1B,mBAQ1BpD,EAR0B,KAQjBqD,EARiB,OAUOjH,cAAxBkH,EAViB,EAUzBjH,OAAmBkH,EAVM,EAUNA,SAVM,EAWyEnH,cAA1FoH,EAXiB,EAWzBnH,OAAwCoH,EAXf,EAWMlH,QAAyCmH,EAX/C,EAWuCpH,OAXvC,EAY6DF,cAA9EuH,EAZiB,EAYzBtH,OAAoCuH,EAZX,EAYErH,QAAqCsH,EAZvC,EAY+BvH,OAE1DwH,EACJ,eAAC,EAAD,WACE,cAAC,EAAD,CAAYtI,QAASqH,EAAaxH,MAAM,OAAOC,WAAY,gBAAiBG,mBR9B3DI,EQ8BqFoH,ER9BlEc,iBAAO,CAAC,MAAO,MAAO,MAAO,OAAQ,OAAQ,QAAS,MAAO,MAAO,QAAQ,SAAC5I,GAAD,OAAWA,EAAM6I,oBAAoBC,SAASpI,EAAOmI,yBQ8BlDzI,UAAQ,IAC3H,cAAC,EAAD,CAAYC,QAASsH,EAAWzH,MAAM,KAAKC,WAAY,kBAAmBG,kBAAmB6D,IAE7F,cAAC,IAAD,CAAQ4E,YAAY,OAAOnG,QAAS,GAAIT,GAAI,EAAGpC,QAASqI,EAAxD,sBAGA,eAAC,IAAD,CAAKlG,WAAY,WAAYD,KAAK,KAAK1C,aAAc,GAAIM,EAAG,EAA5D,UACE,cAAC,EAAD,CACEb,KACE,cAAC,IAAD,CAAMQ,SAAS,OAAOC,WAAW,MAAMG,UAAU,OAAjD,kBAIFX,MACE,eAAC,IAAD,CAAMO,SAAS,OAAOC,WAAW,MAAMG,UAAU,OAAjD,wBACciI,EADd,IAC6BG,OAIjC,cAAC,EAAD,CACEhJ,KACE,cAAC,IAAD,CAAMQ,SAAS,OAAOC,WAAW,MAAMG,UAAU,OAAjD,0BAIFX,MACE,eAAC,IAAD,CAAMO,SAAS,OAAOC,WAAW,MAAMG,UAAU,OAAjD,gBACMiI,OAIV,cAAC,EAAD,CACE7I,KACE,cAAC,IAAD,CAAMQ,SAAS,OAAOC,WAAW,MAAMG,UAAU,OAAjD,gCAIFX,MACE,cAAC,IAAD,CAAMO,SAAS,OAAOC,WAAW,MAAMG,UAAU,OAAjD,kBAKJ,cAAC,IAAD,CAAMJ,SAAS,OAAOC,WAAW,MAAMG,UAAU,SAASmE,GAAI,EAAGlE,EAAG,EAApE,2BAGA,cAAC,EAAD,CACEb,KACE,eAAC,IAAD,CAAMQ,SAAS,OAAOC,WAAW,MAAMG,UAAU,OAAjD,UACGgI,EADH,IACgBC,EADhB,MACoCE,EADpC,IAC+CC,KAGjD/I,MACE,cAAC,IAAD,CAAMO,SAAS,OAAOC,WAAW,MAAMG,UAAU,OAAjD,mBAMJ,cAAC,IAAD,CAAS2F,YAAY,WAAWxB,GAAI,EAAG5B,GAAI,IAC3C,cAAC,EAAD,CACEnD,KACE,eAAC,IAAD,CAAMQ,SAAS,OAAOC,WAAW,MAAMG,UAAU,OAAjD,wBACciI,EADd,UACsCG,KAGxC/I,MACE,cAAC,IAAD,CAAMO,SAAS,OAAOC,WAAW,MAAMG,UAAU,OAAjD,sBAMO,OAAZiF,GACC,eAAC,WAAD,WACE,eAAC,IAAD,CAAK3C,WAAY,WAAYD,KAAK,KAAK1C,aAAc,GAAIM,EAAG,EAAGkE,GAAI,EAAnE,UACE,cAAC,IAAD,CAAMtE,WAAW,MAAMD,SAAS,KAAKwJ,UAAU,WAAW7G,GAAI,EAA9D,SACG0C,EAAQmC,OAEX,cAAC,EAAD,CACE9H,WAAW,WACXF,KACE,cAAC,IAAD,CAAMS,WAAW,MAAMD,SAAS,KAAKwJ,UAAU,WAAW5B,GAAI,EAA9D,SACGvC,EAAQkB,MAGb9G,MACE,cAAC,IAAD,CAAMQ,WAAW,MAAMD,SAAS,IAAIwJ,UAAU,WAA9C,SACGnE,EAAQiB,YAKjB,cAAC,IAAD,CAAQiD,YAAY,OAAOnG,QAAS,GAAImB,GAAI,EAAGhE,QAAS2I,EAAxD,uBAQFO,EACJ,cAAC,EAAD,UACE,eAAC,IAAD,CAAM/F,UAAU,SAAhB,UACE,cAAC,EAAD,CAAUnD,QAASwI,EAAnB,SACE,cAAC,IAAD,CAAQ1I,EAAG,EAAX,SACE,cAAC,IAAD,CAAMR,GAAI6J,IAAQvJ,MAAM,WAAWwH,EAAG,EAAGgC,EAAG,QAG/C3E,EAAMM,SAAS3B,KAAI,SAACgD,GAAD,OAClB,eAAC,EAAD,CAEEpG,QAAS,WACPmI,EAAW/B,GACXiC,KAJJ,UAOE,cAAC,IAAD,CAAM3I,WAAW,MAAMD,SAAS,KAAKwJ,UAAU,WAAW7G,GAAI,EAA9D,SACGgE,EAAEa,OAEL,cAAC,EAAD,CACE9H,WAAW,WACXF,KACE,cAAC,IAAD,CAAMS,WAAW,MAAMD,SAAS,KAAKwJ,UAAU,WAAW5B,GAAI,EAA9D,SACGjB,EAAEJ,MAGP9G,MACE,cAAC,IAAD,CAAMQ,WAAW,MAAMD,SAAS,KAAKwJ,UAAU,WAA/C,SACG7C,EAAEL,WAlBJK,EAAEG,YA4BjB,OACE,eAAC,WAAD,WACE,cAAC,EAAD,CAAiBpF,OAAQmH,EAAuBjH,QAASkH,EAAzD,yBAGA,cAAC,EAAD,CAAapH,OAAQsH,EAAmBpH,QAASqH,EAAjD,iBAGA,eAAC,IAAD,CAAeN,UAAWA,EAA1B,UACGQ,EACAM,QCpLF,IAAMG,EAAY,WACvB,OACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,YAAYC,QAAS,cAAC7B,EAAD,MACjC,cAAC,IAAD,CAAO4B,KAAK,IAAIC,QAAS,cAAC,EAAD,YAM3BC,EAAU,kBAAM,cAAC,IAAD,CAAUC,GAAG,cCPnCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,EAAD,UACE,cAAC,EAAD,UAINC,SAASC,eAAe,SAM1BvL,M","file":"static/js/main.2911fd21.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Flex, Spacer } from \"@chakra-ui/layout\";\nimport { ResponsiveValue } from \"@chakra-ui/styled-system\";\nimport { ReactNode } from \"react\";\nimport { Property } from \"csstype\";\n\ninterface RowDataProps {\n  left: ReactNode;\n  right: ReactNode;\n  alignItems?: ResponsiveValue<Property.AlignItems>;\n}\n\nexport const RowData = ({ left, right, alignItems }: RowDataProps) => (\n  <Flex alignItems={alignItems}>\n    {left}\n    <Spacer />\n    {right}\n  </Flex>\n);\n","import { Box } from \"@chakra-ui/layout\";\nimport React from \"react\";\n\nexport function CurrencyItem(props: { value: string; onClick: () => void }) {\n  return (\n    <Box\n      as=\"button\"\n      transition=\"all 0.2s cubic-bezier(.08,.52,.52,1)\"\n      borderRadius=\"2px\"\n      fontSize=\"14px\"\n      fontWeight=\"semibold\"\n      bg=\"white\"\n      color=\"gray\"\n      textAlign=\"left\"\n      p={5}\n      _hover={{ bg: \"#ebedf0\" }}\n      onClick={props.onClick}\n    >\n      {props.value}\n    </Box>\n  );\n}\n","import { Button } from \"@chakra-ui/button\";\nimport { useControllableState, useDisclosure } from \"@chakra-ui/hooks\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { Box, Flex, Text } from \"@chakra-ui/layout\";\nimport { Modal, ModalBody, ModalCloseButton, ModalContent, ModalHeader, ModalOverlay } from \"@chakra-ui/modal\";\nimport { Fragment, useCallback, useEffect } from \"react\";\nimport { FaChevronDown } from \"react-icons/fa\";\nimport { CloseButton } from \"@chakra-ui/close-button\";\nimport { CurrencyItem } from \"./CurrencyItem\";\n\nexport type CurrencyHandler = [\n  number,\n  React.Dispatch<React.SetStateAction<number>>,\n  string,\n  React.Dispatch<React.SetStateAction<string>>,\n  string,\n  React.Dispatch<React.SetStateAction<string>>\n];\n\ninterface MoneyInputProps {\n  label: string;\n  modalLabel: string;\n  isSearch?: boolean;\n  handler: CurrencyHandler;\n  allowedCurrencies: string[];\n}\n\nexport const MoneyInput = (props: MoneyInputProps) => {\n  const { label, modalLabel, isSearch, handler, allowedCurrencies } = props;\n  const [value, setValue, symbol, setSymbol, search, setSearch] = handler;\n\n  const [amount, setAmount] = useControllableState<string>({ defaultValue: value.toString() });\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  const handleSetValue = useCallback((e: any) => {\n    setAmount(e.target.value);\n    const newVal = parseFloat(e.target.value);\n    if (!isNaN(newVal)) setValue(newVal);\n  }, []);\n\n  const handleSetSymbol = useCallback(\n    (symb: string) => () => {\n      setSymbol(symb);\n      setSearch(\"\");\n      onClose();\n    },\n    [setSymbol, setSearch, onClose]\n  );\n\n  const handleCleanSearch = useCallback(() => {\n    setSearch(\"\");\n  }, [setSearch]);\n\n  useEffect(() => {\n    setAmount(value.toString());\n  }, [value]);\n\n  const MoneyInputField = (\n    <Box maxW=\"sm\" background=\"white\" borderRadius={25} p={5} mb={5}>\n      <Text fontSize=\"13px\" fontWeight=\"300\">\n        {label}\n      </Text>\n      <Box display=\"flex\">\n        <Input type=\"number\" variant=\"unstyled\" borderWidth={0} fontSize={24} fontWeight={300} onChange={handleSetValue} value={amount} />\n        <Button rightIcon={<FaChevronDown />} background=\"inherit\" onClick={onOpen}>\n          {symbol}\n        </Button>\n      </Box>\n    </Box>\n  );\n\n  const MoneyInputModal = (\n    <Modal isOpen={isOpen} onClose={onClose} isCentered>\n      <ModalOverlay />\n      <ModalContent rounded={25} pb={25} minH=\"50vh\">\n        <ModalHeader alignItems=\"center\">{modalLabel}</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          {isSearch && (\n            <InputGroup size=\"md\" mb={8}>\n              <Input placeholder=\"Search\" value={search} onChange={(e) => setSearch(e.target.value)} borderRadius={25} />\n              <InputRightElement width=\"4.5rem\">\n                <CloseButton onClick={handleCleanSearch} />\n              </InputRightElement>\n            </InputGroup>\n          )}\n          <Flex direction=\"column\">\n            {allowedCurrencies.map((currency) => (\n              <CurrencyItem value={currency} onClick={handleSetSymbol(currency)} />\n            ))}\n          </Flex>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n\n  return (\n    <Fragment>\n      {MoneyInputField}\n      {MoneyInputModal}\n    </Fragment>\n  );\n};\n","import { useControllableState } from \"@chakra-ui/hooks\";\nimport { CurrencyHandler } from \"../components/MoneyInput\";\n\nexport const useExchangeCurrency = (initialAmount: number, initialCurrency: string): CurrencyHandler => {\n  const [amount, setAmount] = useControllableState({ defaultValue: initialAmount });\n  const [currency, setCurrency] = useControllableState({ defaultValue: initialCurrency });\n  const [search, setSearch] = useControllableState({ defaultValue: \"\" });\n\n  return [amount, setAmount, currency, setCurrency, search, setSearch];\n};\n","import { Flex } from \"@chakra-ui/layout\";\nimport { FC } from \"react\";\n\nexport const Card: FC = (props) => (\n  <Flex height=\"100vh\" justifyContent=\"center\" alignItems=\"flex-start\">\n    <Flex direction=\"column\" background={\"gray.100\"} rounded={25} pt={10} pb={10} pr={5} pl={5} mt=\"15vh\" mb=\"15vh\" minHeight={500} minWidth={400}>\n      {props.children}\n    </Flex>\n  </Flex>\n);\n","import { filter } from \"lodash\";\n\n\nexport const fiats = [\"EUR\", \"CHF\"];\nexport const tokens = (search: string) => filter([\"BTC\", \"ETH\", \"SOL\", \"CHIA\", \"SHIB\", \"MATIC\", \"BEG\", \"BMA\", \"BAM\"], (value) => value.toLocaleLowerCase().includes(search.toLocaleLowerCase()));\n","import { BankAccount, Order } from \"./State\";\n\nexport interface Action {\n  type: string;\n}\n\nexport interface Payload<T> extends Action {\n  payload: T;\n}\n\nexport const ADD_ORDER = \"ADD_ORDER\";\n\nexport function addOrder(payload: Order): Payload<Order> {\n  return {\n    type: ADD_ORDER,\n    payload,\n  };\n}\n\nexport const CLEAN_ORDERS = \"CLEAN_ORDERS\";\n\nexport function cleanOrders(): Action {\n  return {\n    type: CLEAN_ORDERS,\n  };\n}\n\nexport const ADD_BANK_ACCOUNT = \"ADD_BANK_ACCOUNT\";\n\nexport function addBankAccount(payload: BankAccount): Payload<BankAccount> {\n  return {\n    type: ADD_BANK_ACCOUNT,\n    payload,\n  };\n}\n\nexport const CLEAN_BANK_ACCOUNTS = \"CLEAN_BANK_ACCOUNTS\";\n\nexport function cleanBankAccounts(): Action {\n  return {\n    type: CLEAN_ORDERS,\n  };\n}\n\n","import { Reducer } from \"react\";\nimport { Action, ADD_BANK_ACCOUNT, ADD_ORDER, CLEAN_BANK_ACCOUNTS, CLEAN_ORDERS, Payload } from \"./Action\";\nimport { BankAccount, Order, State } from \"./State\";\n\nexport const reducer: Reducer<State, Action> = (state, action) => {\n  switch (action.type) {\n    case ADD_ORDER: {\n      const { payload: order } = action as Payload<Order>;\n      return { ...state, orders: [...state.orders, order] };\n    }\n    case CLEAN_ORDERS: {\n      return { ...state, orders: [] };\n    }\n    case ADD_BANK_ACCOUNT: {\n      const { payload: account } = action as Payload<BankAccount>;\n      return { ...state, accounts: [...state.accounts, account] };\n    }\n    case CLEAN_BANK_ACCOUNTS: {\n      return { ...state, accounts: [] };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n","export interface Order {}\n\nexport interface BankAccount {\n  id: string;\n  iban: string;\n  bic: string;\n  bank: string;\n\n  email: string;\n  fullName: string;\n  address: string;\n  postalCode: string;\n  city: string;\n  country: string;\n}\n\nexport interface State {\n  accounts: BankAccount[];\n  orders: Order[];\n}\n\nexport const initialState: State = {\n  accounts: [],\n  orders: [],\n};\n","import { createContext, FunctionComponent, useReducer } from \"react\";\nimport { Action } from \"./Action\";\nimport { reducer } from \"./Reducer\";\nimport { State, initialState } from \"./State\";\n\ninterface StoreType {\n  state: State;\n  dispatch: React.Dispatch<Action>;\n}\nexport const store = createContext({} as StoreType);\n\nconst StoreProvider: FunctionComponent = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const value = { state, dispatch };\n  return <store.Provider value={value}> {children} </store.Provider>;\n};\n\nexport default StoreProvider;\n","import { Box } from \"@chakra-ui/layout\";\n\nexport const BankCard: React.FC<any> = ({ children, ...props }) => (\n  <Box bg=\"white\" borderColor=\"gray.300\" borderRadius={30} pt={3} pb={3} pl={10} pr={10} mb={2} cursor=\"pointer\" {...props}>\n    {children}\n  </Box>\n);\n","import { store } from \"../store\";\nimport { useContext } from \"react\";\nimport { Modal, ModalBody, ModalCloseButton, ModalContent, ModalHeader, ModalOverlay, ModalProps } from \"@chakra-ui/modal\";\nimport { Formik, FormikHelpers, Field, Form, useFormik } from \"formik\";\nimport { BankAccount } from \"../store/State\";\nimport { addBankAccount } from \"../store/Action\";\nimport { FormControl, FormHelperText, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Button } from \"@chakra-ui/button\";\nimport { Flex } from \"@chakra-ui/layout\";\n\nexport const BankAccountForm: React.FC<ModalProps> = ({ isOpen, onClose, children }) => {\n  const { dispatch } = useContext(store);\n\n  const formik = useFormik({\n    initialValues: {\n      bank: \"TRANSFER WISE\",\n      bic: \"TRWIBA1XXX\",\n    } as BankAccount,\n    onSubmit: async (val, ctx) => {\n      dispatch(addBankAccount(val));\n      ctx.resetForm();\n      onClose();\n    },\n  });\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose} isCentered>\n      <ModalOverlay />\n      <ModalContent rounded={25} pb={25} minH=\"50vh\">\n        <ModalHeader alignItems=\"center\">{children}</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <form onSubmit={formik.handleSubmit}>\n            <FormControl id=\"email\">\n              <FormLabel>Email address</FormLabel>\n              <Input\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                value={formik.values.email}\n                onChange={formik.handleChange}\n                error={formik.touched.email && Boolean(formik.errors.email)}\n                helperText={formik.touched.email && formik.errors.email}\n              />\n              <FormHelperText>We'll never share your email.</FormHelperText>\n            </FormControl>\n            <FormControl id=\"iban\" pt={5}>\n              <FormLabel>IBAN</FormLabel>\n              <Input\n                id=\"iban\"\n                name=\"iban\"\n                type=\"text\"\n                value={formik.values.iban}\n                onChange={formik.handleChange}\n                error={formik.touched.iban && Boolean(formik.errors.iban)}\n                helperText={formik.touched.iban && formik.errors.iban}\n              />\n              <FormHelperText>We'll never share this information.</FormHelperText>\n            </FormControl>\n            {/*  \n              <Field name=\"bic\" type=\"text\" />\n              <Field name=\"bank\" type=\"text\" /> */}\n\n            {/* <Field name=\"fullName\" type=\"text\" />\n              <Field name=\"address\" type=\"text\" />\n              <Field name=\"postalCode\" type=\"text\" />\n              <Field name=\"city\" type=\"text\" />\n              <Field name=\"country\" type=\"text\" /> */}\n            <FormControl id=\"fullName\" pt={5}>\n              <FormLabel>Full name</FormLabel>\n              <Input\n                id=\"fullName\"\n                name=\"fullName\"\n                type=\"text\"\n                value={formik.values.fullName}\n                onChange={formik.handleChange}\n                error={formik.touched.fullName && Boolean(formik.errors.fullName)}\n                helperText={formik.touched.fullName && formik.errors.fullName}\n              />\n            </FormControl>\n            <FormControl id=\"address\" pt={5}>\n              <FormLabel>Address</FormLabel>\n              <Input\n                id=\"address\"\n                name=\"address\"\n                type=\"text\"\n                value={formik.values.address}\n                onChange={formik.handleChange}\n                error={formik.touched.address && Boolean(formik.errors.address)}\n                helperText={formik.touched.address && formik.errors.address}\n              />\n            </FormControl>\n           <Flex>\n           <FormControl id=\"postalCode\" pt={5} w={250} mr={5}>\n              <FormLabel>ZIP/Postal Code</FormLabel>\n              <Input\n                id=\"postalCode\"\n                name=\"postalCode\"\n                type=\"text\"\n                value={formik.values.postalCode}\n                onChange={formik.handleChange}\n                error={formik.touched.postalCode && Boolean(formik.errors.postalCode)}\n                helperText={formik.touched.postalCode && formik.errors.postalCode}\n              />\n            </FormControl>\n            <FormControl id=\"country\" pt={5}>\n              <FormLabel>Country</FormLabel>\n              <Input\n                id=\"country\"\n                name=\"country\"\n                type=\"text\"\n                value={formik.values.country}\n                onChange={formik.handleChange}\n                error={formik.touched.country && Boolean(formik.errors.country)}\n                helperText={formik.touched.country && formik.errors.country}\n              />\n            </FormControl>\n           </Flex>\n            <Button mt={10} isFullWidth type=\"submit\">\n              Submit\n            </Button>\n          </form>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n};\n","import { store } from \"../store\";\nimport { useContext } from \"react\";\nimport { Modal, ModalBody, ModalCloseButton, ModalContent, ModalHeader, ModalOverlay, ModalProps } from \"@chakra-ui/modal\";\n\nexport const PaymentForm: React.FC<ModalProps> = ({ isOpen, onClose, children }) => {\n  const { dispatch } = useContext(store);\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose} isCentered>\n      <ModalOverlay />\n      <ModalContent rounded={25} pb={25} minH=\"50vh\">\n        <ModalHeader alignItems=\"center\">{children}</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody></ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n};\n","import { Button } from \"@chakra-ui/button\";\nimport { Box, Center, Divider, Flex, Text } from \"@chakra-ui/layout\";\nimport { RowData } from \"../components/RowData\";\nimport { MoneyInput } from \"../components/MoneyInput\";\nimport { useExchangeCurrency } from \"../hooks/useExchangeCurrency\";\nimport ReactCardFlip from \"react-card-flip\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport { Card } from \"../components/Card\";\nimport { tokens, fiats } from \"../data/currencies\";\nimport { store } from \"../store\";\nimport { Fragment, useContext, useState } from \"react\";\nimport { BankAccount } from \"../store/State\";\nimport { FaPlus } from \"react-icons/fa\";\nimport Icon from \"@chakra-ui/icon\";\nimport { BankCard } from \"../components/BankCard\";\nimport { BankAccountForm } from \"../components/BankAccountForm\";\nimport { PaymentForm } from \"../components/PaymentForm\";\n\nexport default function Exchange() {\n  const { state } = useContext(store);\n\n  const handlerFrom = useExchangeCurrency(0, \"BTC\");\n  const handlerTo = useExchangeCurrency(200, \"EUR\");\n\n  const [amountFrom, _, currencyFrom, __, searchFrom] = handlerFrom;\n  const [amountTo, ___, currencyTo] = handlerTo;\n  const [account, setAccount] = useState<BankAccount | null>(null);\n\n  const { isOpen: isFlipped, onToggle } = useDisclosure();\n  const { isOpen: isOpenBankAccountForm, onClose: onCloseBankAccountForm, onOpen: onOpenBankAccountForm } = useDisclosure();\n  const { isOpen: isOpenPaymentForm, onClose: onClosePaymentForm, onOpen: onOpenPaymentForm } = useDisclosure();\n\n  const exchangeCard = (\n    <Card>\n      <MoneyInput handler={handlerFrom} label=\"From\" modalLabel={\"Select crypto\"} allowedCurrencies={tokens(searchFrom)} isSearch />\n      <MoneyInput handler={handlerTo} label=\"To\" modalLabel={\"Select currency\"} allowedCurrencies={fiats} />\n\n      <Button colorScheme=\"teal\" rounded={25} mb={5} onClick={onToggle}>\n        Exchange\n      </Button>\n      <Box background={\"gray.200\"} maxW=\"sm\" borderRadius={25} p={5}>\n        <RowData\n          left={\n            <Text fontSize=\"12px\" fontWeight=\"400\" textAlign=\"left\">\n              Rate\n            </Text>\n          }\n          right={\n            <Text fontSize=\"12px\" fontWeight=\"300\" textAlign=\"left\">\n              ~0.8458236 {currencyFrom}/{currencyTo}\n            </Text>\n          }\n        />\n        <RowData\n          left={\n            <Text fontSize=\"12px\" fontWeight=\"400\" textAlign=\"left\">\n              Exchange fee\n            </Text>\n          }\n          right={\n            <Text fontSize=\"12px\" fontWeight=\"300\" textAlign=\"left\">\n              20 {currencyFrom}\n            </Text>\n          }\n        />\n        <RowData\n          left={\n            <Text fontSize=\"12px\" fontWeight=\"400\" textAlign=\"left\">\n              Slippage tolerance\n            </Text>\n          }\n          right={\n            <Text fontSize=\"12px\" fontWeight=\"300\" textAlign=\"left\">\n              1%\n            </Text>\n          }\n        />\n        <Text fontSize=\"12px\" fontWeight=\"300\" textAlign=\"center\" mt={3} p={3}>\n          ORDER ROUTING\n        </Text>\n        <RowData\n          left={\n            <Text fontSize=\"12px\" fontWeight=\"400\" textAlign=\"left\">\n              {amountFrom} {currencyFrom} &gt; {amountTo} {currencyTo}\n            </Text>\n          }\n          right={\n            <Text fontSize=\"10px\" fontWeight=\"300\" textAlign=\"left\">\n              via\n            </Text>\n          }\n        />\n\n        <Divider borderColor=\"gray.400\" mt={2} mb={2} />\n        <RowData\n          left={\n            <Text fontSize=\"12px\" fontWeight=\"400\" textAlign=\"left\">\n              0.03036954 {currencyFrom} &gt; 100 {currencyTo}\n            </Text>\n          }\n          right={\n            <Text fontSize=\"10px\" fontWeight=\"300\" textAlign=\"left\">\n              via\n            </Text>\n          }\n        />\n      </Box>\n      {account !== null && (\n        <Fragment>\n          <Box background={\"gray.200\"} maxW=\"sm\" borderRadius={25} p={5} mt={5}>\n            <Text fontWeight=\"800\" fontSize=\"15\" textColor=\"gray.600\" mb={2}>\n              {account.iban}\n            </Text>\n            <RowData\n              alignItems=\"flex-end\"\n              left={\n                <Text fontWeight=\"600\" fontSize=\"12\" textColor=\"gray.500\" mr={5}>\n                  {account.bic}\n                </Text>\n              }\n              right={\n                <Text fontWeight=\"600\" fontSize=\"8\" textColor=\"gray.400\">\n                  {account.bank}\n                </Text>\n              }\n            />\n          </Box>\n          <Button colorScheme=\"blue\" rounded={25} mt={5} onClick={onOpenPaymentForm}>\n            Pay\n          </Button>\n        </Fragment>\n      )}\n    </Card>\n  );\n\n  const bankAccountCard = (\n    <Card>\n      <Flex direction=\"column\">\n        <BankCard onClick={onOpenBankAccountForm}>\n          <Center p={5}>\n            <Icon as={FaPlus} color=\"gray.400\" w={7} h={7} />\n          </Center>\n        </BankCard>\n        {state.accounts.map((a) => (\n          <BankCard\n            key={a.id}\n            onClick={() => {\n              setAccount(a);\n              onToggle();\n            }}\n          >\n            <Text fontWeight=\"800\" fontSize=\"25\" textColor=\"gray.500\" mb={2}>\n              {a.iban}\n            </Text>\n            <RowData\n              alignItems=\"flex-end\"\n              left={\n                <Text fontWeight=\"600\" fontSize=\"15\" textColor=\"gray.400\" mr={5}>\n                  {a.bic}\n                </Text>\n              }\n              right={\n                <Text fontWeight=\"600\" fontSize=\"10\" textColor=\"gray.300\">\n                  {a.bank}\n                </Text>\n              }\n            />\n          </BankCard>\n        ))}\n      </Flex>\n    </Card>\n  );\n\n  return (\n    <Fragment>\n      <BankAccountForm isOpen={isOpenBankAccountForm} onClose={onCloseBankAccountForm}>\n        Add account\n      </BankAccountForm>\n      <PaymentForm isOpen={isOpenPaymentForm} onClose={onClosePaymentForm}>\n        Pay\n      </PaymentForm>\n      <ReactCardFlip isFlipped={isFlipped}>\n        {exchangeCard}\n        {bankAccountCard}\n      </ReactCardFlip>\n    </Fragment>\n  );\n}\n","import { HashRouter as Router, Route, Routes, Navigate } from \"react-router-dom\";\nimport Exchange from \"./pages/Exchange\";\n\nexport const AppRoutes = () => {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/exchange\" element={<Exchange />} />\n        <Route path=\"*\" element={<NoMatch />} />\n      </Routes>\n    </Router>\n  );\n};\n\nconst NoMatch = () => <Navigate to=\"exchange\" />;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport { AppRoutes } from \"./routes\";\nimport StoreProvider from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <StoreProvider>\n        <AppRoutes />\n      </StoreProvider>\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}