{"version":3,"sources":["reportWebVitals.ts","components/RowData.tsx","components/CurrencyItem.tsx","components/MoneyInput.tsx","hooks/useExchangeCurrency.tsx","pages/Exchange.tsx","routes.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","RowData","left","right","alignItems","CurrencyItem","props","as","transition","borderRadius","fontSize","fontWeight","bg","color","textAlign","p","_hover","onClick","value","MoneyInput","label","modalLabel","isSearch","handler","allowedCurrencies","setValue","symbol","setSymbol","search","setSearch","useControllableState","defaultValue","toString","amount","setAmount","useDisclosure","isOpen","onOpen","onClose","handleSetValue","useCallback","e","target","newVal","parseFloat","isNaN","handleSetSymbol","symb","handleCleanSearch","useEffect","MoneyInputField","maxW","background","mb","display","type","variant","borderWidth","onChange","rightIcon","MoneyInputModal","isCentered","rounded","pb","minH","size","placeholder","width","direction","map","currency","useExchangeCurrency","initialAmount","initialCurrency","setCurrency","fiats","Exchange","handlerFrom","handlerTo","amountFrom","setAmountFrom","currencyFrom","searchFrom","amountTo","setAmountTo","currencyTo","height","justifyContent","pt","pr","pl","mt","minWidth","filter","toLocaleLowerCase","includes","colorScheme","borderColor","AppRoutes","path","element","NoMatch","to","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b7976929.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Flex, Spacer } from \"@chakra-ui/layout\";\nimport { ReactNode } from \"react\";\n\ninterface RowDataProps {\n  left: ReactNode;\n  right: ReactNode;\n}\n\nexport const RowData = ({ left, right }: RowDataProps) => (\n  <Flex alignItems=\"center\">\n    {left}\n    <Spacer />\n    {right}\n  </Flex>\n);\n","import { Box } from \"@chakra-ui/layout\";\nimport React from \"react\";\n\nexport function CurrencyItem(props: { value: string; onClick: () => void }) {\n  return (\n    <Box\n      as=\"button\"\n      transition=\"all 0.2s cubic-bezier(.08,.52,.52,1)\"\n      borderRadius=\"2px\"\n      fontSize=\"14px\"\n      fontWeight=\"semibold\"\n      bg=\"white\"\n      color=\"gray\"\n      textAlign=\"left\"\n      p={5}\n      _hover={{ bg: \"#ebedf0\" }}\n      onClick={props.onClick}\n    >\n      {props.value}\n    </Box>\n  );\n}\n","import { Button } from \"@chakra-ui/button\";\nimport { useControllableState, useDisclosure } from \"@chakra-ui/hooks\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { Box, Flex, Text } from \"@chakra-ui/layout\";\nimport { Modal, ModalBody, ModalCloseButton, ModalContent, ModalHeader, ModalOverlay } from \"@chakra-ui/modal\";\nimport { Fragment, useCallback, useEffect } from \"react\";\nimport { FaChevronDown } from \"react-icons/fa\";\nimport { CloseButton } from \"@chakra-ui/close-button\";\nimport { CurrencyItem } from \"./CurrencyItem\";\n\nexport type CurrencyHandler = [\n  number,\n  React.Dispatch<React.SetStateAction<number>>,\n  string,\n  React.Dispatch<React.SetStateAction<string>>,\n  string,\n  React.Dispatch<React.SetStateAction<string>>\n];\n\ninterface MoneyInputProps {\n  label: string;\n  modalLabel: string;\n  isSearch?: boolean;\n  handler: CurrencyHandler;\n  allowedCurrencies: string[];\n}\n\nexport const MoneyInput = (props: MoneyInputProps) => {\n  const { label, modalLabel, isSearch, handler, allowedCurrencies } = props;\n  const [value, setValue, symbol, setSymbol, search, setSearch] = handler;\n\n  const [amount, setAmount] = useControllableState<string>({ defaultValue: value.toString() });\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  const handleSetValue = useCallback((e: any) => {\n    setAmount(e.target.value);\n    const newVal = parseFloat(e.target.value);\n    if (!isNaN(newVal)) setValue(newVal);\n  }, []);\n\n  const handleSetSymbol = useCallback(\n    (symb: string) => () => {\n      setSymbol(symb);\n      setSearch(\"\");\n      onClose();\n    },\n    [setSymbol, setSearch, onClose]\n  );\n\n  const handleCleanSearch = useCallback(() => {\n    setSearch(\"\");\n  }, [setSearch]);\n\n  useEffect(() => {\n    setAmount(value.toString());\n  }, [value]);\n\n  const MoneyInputField = (\n    <Box maxW=\"sm\" background=\"white\" borderRadius={25} p={5} mb={5}>\n      <Text fontSize=\"13px\" fontWeight=\"300\">\n        {label}\n      </Text>\n      <Box display=\"flex\">\n        <Input type=\"number\" variant=\"unstyled\" borderWidth={0} fontSize={24} fontWeight={300} onChange={handleSetValue} value={amount} />\n        <Button rightIcon={<FaChevronDown />} background=\"inherit\" onClick={onOpen}>\n          {symbol}\n        </Button>\n      </Box>\n    </Box>\n  );\n\n  const MoneyInputModal = (\n    <Modal isOpen={isOpen} onClose={onClose} isCentered>\n      <ModalOverlay />\n      <ModalContent rounded={25} pb={25} minH=\"50vh\">\n        <ModalHeader alignItems=\"center\">{modalLabel}</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          {isSearch && (\n            <InputGroup size=\"md\" mb={8}>\n              <Input placeholder=\"Search\" value={search} onChange={(e) => setSearch(e.target.value)} borderRadius={25} />\n              <InputRightElement width=\"4.5rem\">\n                <CloseButton onClick={handleCleanSearch} />\n              </InputRightElement>\n            </InputGroup>\n          )}\n          <Flex direction=\"column\">\n            {allowedCurrencies.map((currency) => (\n              <CurrencyItem value={currency} onClick={handleSetSymbol(currency)} />\n            ))}\n          </Flex>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n\n  return (\n    <Fragment>\n      {MoneyInputField}\n      {MoneyInputModal}\n    </Fragment>\n  );\n};\n","import { useControllableState } from \"@chakra-ui/hooks\";\nimport { CurrencyHandler } from \"../components/MoneyInput\";\n\nexport const useExchangeCurrency = (initialAmount: number, initialCurrency: string): CurrencyHandler => {\n  const [amount, setAmount] = useControllableState({ defaultValue: initialAmount });\n  const [currency, setCurrency] = useControllableState({ defaultValue: initialCurrency });\n  const [search, setSearch] = useControllableState({ defaultValue: \"\" });\n\n  return [amount, setAmount, currency, setCurrency, search, setSearch];\n};\n","import { Button } from \"@chakra-ui/button\";\nimport { Box, Divider, Flex, Text } from \"@chakra-ui/layout\";\nimport { RowData } from \"../components/RowData\";\nimport { MoneyInput } from \"../components/MoneyInput\";\nimport { useExchangeCurrency } from \"../hooks/useExchangeCurrency\";\nimport { filter } from \"lodash\";\n\nexport const fiats = [\"EUR\", \"CHF\"];\nexport const tokens = (search: string) =>\n  filter([\"BTC\", \"ETH\", \"SOL\", \"CHIA\", \"SHIB\", \"MATIC\", \"BEG\", \"BMA\", \"BAM\"], (value) => value.toLocaleLowerCase().includes(search.toLocaleLowerCase()));\n\nexport default function Exchange() {\n  const handlerFrom = useExchangeCurrency(0, \"BTC\");\n  const handlerTo = useExchangeCurrency(200, \"EUR\");\n\n  const [amountFrom, setAmountFrom, currencyFrom, _, searchFrom] = handlerFrom;\n  const [amountTo, setAmountTo, currencyTo] = handlerTo;\n\n  return (\n    <Flex height=\"100vh\" justifyContent=\"center\" alignItems=\"flex-start\" borderWidth=\"1px\">\n      <Flex direction=\"column\" background={\"gray.100\"} rounded={25} pt={10} pb={10} pr={5} pl={5} mt={250} minWidth={400}>\n        <MoneyInput handler={handlerFrom} label=\"From\" modalLabel={\"Select crypto\"} isSearch allowedCurrencies={tokens(searchFrom)} />\n        <MoneyInput handler={handlerTo} label=\"To\" modalLabel={\"Select currency\"} allowedCurrencies={fiats} />\n\n        <Button\n          colorScheme=\"teal\"\n          rounded={25}\n          mb={5}\n          onClick={() => {\n            setAmountTo(400);\n            setAmountFrom(200);\n          }}\n        >\n          Exchange\n        </Button>\n        <Box background={\"gray.200\"} maxW=\"sm\" borderRadius={25} p={5}>\n          <RowData\n            left={\n              <Text fontSize=\"12px\" fontWeight=\"400\" textAlign=\"left\">\n                Rate\n              </Text>\n            }\n            right={\n              <Text fontSize=\"12px\" fontWeight=\"300\" textAlign=\"left\">\n                ~0.8458236 {currencyFrom}/{currencyTo}\n              </Text>\n            }\n          />\n          <RowData\n            left={\n              <Text fontSize=\"12px\" fontWeight=\"400\" textAlign=\"left\">\n                Exchange fee\n              </Text>\n            }\n            right={\n              <Text fontSize=\"12px\" fontWeight=\"300\" textAlign=\"left\">\n                20 {currencyFrom}\n              </Text>\n            }\n          />\n          <RowData\n            left={\n              <Text fontSize=\"12px\" fontWeight=\"400\" textAlign=\"left\">\n                Slippage tolerance\n              </Text>\n            }\n            right={\n              <Text fontSize=\"12px\" fontWeight=\"300\" textAlign=\"left\">\n                1%\n              </Text>\n            }\n          />\n          <Text fontSize=\"12px\" fontWeight=\"300\" textAlign=\"center\" mt={3} p={3}>\n            ORDER ROUTING\n          </Text>\n          <RowData\n            left={\n              <Text fontSize=\"12px\" fontWeight=\"400\" textAlign=\"left\">\n                {amountFrom} {currencyFrom} &gt; {amountTo} {currencyTo}\n              </Text>\n            }\n            right={\n              <Text fontSize=\"10px\" fontWeight=\"300\" textAlign=\"left\">\n                via\n              </Text>\n            }\n          />\n\n          <Divider borderColor=\"gray.400\" mt={2} mb={2} />\n          <RowData\n            left={\n              <Text fontSize=\"12px\" fontWeight=\"400\" textAlign=\"left\">\n                0.03036954 {currencyFrom} &gt; 100 {currencyTo}\n              </Text>\n            }\n            right={\n              <Text fontSize=\"10px\" fontWeight=\"300\" textAlign=\"left\">\n                via\n              </Text>\n            }\n          />\n        </Box>\n      </Flex>\n    </Flex>\n  );\n}\n","import { HashRouter as Router, Route, Routes, Navigate } from \"react-router-dom\";\nimport Exchange from \"./pages/Exchange\";\n\nexport const AppRoutes = () => {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/exchange\" element={<Exchange />} />\n        <Route path=\"*\" element={<NoMatch />} />\n      </Routes>\n    </Router>\n  );\n};\n\nconst NoMatch = () => <Navigate to=\"exchange\" />;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport { AppRoutes } from \"./routes\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <AppRoutes />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}